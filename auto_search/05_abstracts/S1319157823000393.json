{"pii": "S1319157823000393", "abstracts": {"#name": "abstracts", "$": {"xmlns:ce": true, "xmlns:dm": true, "xmlns:sb": true}, "$$": [{"#name": "abstract", "$": {"class": "author", "id": "ab005", "view": "all"}, "$$": [{"#name": "section-title", "$": {"id": "st005"}, "_": "Abstract"}, {"#name": "abstract-sec", "$": {"id": "as005", "view": "all"}, "$$": [{"#name": "simple-para", "$": {"id": "sp0005", "view": "all"}, "_": "Log-based anomaly detection is important for improving the reliability and availability of software systems, especially those evolving using DevOps, owing to the huge number of logs generated during continuous practices. However, DevOps practitioners typically inspect and interpret the generated data and logs manually on specific occasions as part of the troubleshooting process. This process of manual inspection is time consuming and challenging because these data and logs have grown to an unmanageable size owing to the increasing size and complexity of the systems."}, {"#name": "simple-para", "$": {"id": "sp0010", "view": "all"}, "$$": [{"#name": "__text__", "_": "In this research paper, we introduce the "}, {"#name": "bold", "_": "D"}, {"#name": "__text__", "_": "evOps "}, {"#name": "bold", "_": "A"}, {"#name": "__text__", "_": "nomaly "}, {"#name": "bold", "_": "D"}, {"#name": "__text__", "_": "etection "}, {"#name": "bold", "_": "F"}, {"#name": "__text__", "_": "ramework (DADF). DADF is composed of two components that rely on Machine Learning (ML) and Artificial Intelligence (AI) to analyze the data and logs generated during DevOps practices to automatically detect anomalies. The first component is "}, {"#name": "bold", "_": "A"}, {"#name": "__text__", "_": "nomaly "}, {"#name": "bold", "_": "D"}, {"#name": "__text__", "_": "etection "}, {"#name": "bold", "_": "B"}, {"#name": "__text__", "_": "efore "}, {"#name": "bold", "_": "P"}, {"#name": "__text__", "_": "roduction (ADBP), which intends to detect anomalies in the prospective release before its operation in the production environment by adopting the Local Outlier Factor (LOF) technique on the data collected during implementation, building, testing, and deployment. The second component is "}, {"#name": "bold", "_": "A"}, {"#name": "__text__", "_": "nomaly "}, {"#name": "bold", "_": "D"}, {"#name": "__text__", "_": "etection "}, {"#name": "bold", "_": "A"}, {"#name": "__text__", "_": "fter "}, {"#name": "bold", "_": "S"}, {"#name": "__text__", "_": "taging (ADAS), which intends to detect anomalies after the operation of the released system by adopting the Vector Auto-Regression (VAR) technique on the data collected during monitoring from the system log, application log, and performance metrics (CPU and memory). We experimentally evaluated ADBP and ADAS in two different real-world industrial projects. The experimental results demonstrated that the accuracy, precision, recall, and F1-score of the ADBP component were 96%, 87.5%, 100%, and 93.3%, respectively, and the normalized Root Mean Squared Error (nRMSE) of the ADAS component was 2\u201319%. Hence, the results demonstrate the effectiveness of DADF in helping DevOps practitioners and researchers automatically detect anomalies throughout the lifecycle of DevOps by monitoring all DevOps\u2019 practices."}]}]}]}]}}