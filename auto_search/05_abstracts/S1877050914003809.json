{"pii": "S1877050914003809", "abstracts": {"#name": "abstracts", "$": {"xmlns:ce": true, "xmlns:dm": true, "xmlns:sb": true}, "$$": [{"#name": "abstract", "$": {"id": "abs0005", "view": "all", "class": "author"}, "$$": [{"#name": "section-title", "$": {"id": "sect0005"}, "_": "Abstract"}, {"#name": "abstract-sec", "$": {"id": "abst0005", "view": "all"}, "$$": [{"#name": "simple-para", "$": {"id": "spar0005", "view": "all"}, "$$": [{"#name": "__text__", "_": "In the last few years, parallel processing systems have been studied very actively, and, given the huge number of computing nodes now involved in modern supercomputers, many topologies have been proposed to efficiently connect all these CPUs. A torus and its variants are such topologies popular as interconnection networks of massively parallel systems. Torus-connected cycles (TCC) have been introduced recently, building on the interesting properties or tori and enabling nodes clustering. In this paper, we present an algorithm that solves the container problem in a TCC. This problem consists in finding mutually node-disjoint paths between any pair of nodes. In a "}, {"#name": "italic", "_": "T CC"}, {"#name": "__text__", "_": "("}, {"#name": "italic", "_": "k, n"}, {"#name": "__text__", "_": "), the proposed algorithm finds paths of lengths at most ["}, {"#name": "italic", "_": "k"}, {"#name": "__text__", "_": "/2]n"}, {"#name": "sup", "$": {"loc": "post"}, "_": "2"}, {"#name": "__text__", "_": " + (["}, {"#name": "italic", "_": "k"}, {"#name": "__text__", "_": "/2] + 4)n \u2212 3 in O(n"}, {"#name": "sup", "$": {"loc": "post"}, "_": "3"}, {"#name": "__text__", "_": " + kn"}, {"#name": "sup", "$": {"loc": "post"}, "_": "2"}, {"#name": "__text__", "_": ") time. Lastly, an empirical evaluation is conducted to inspect the practical behaviour of this algorithm."}]}]}]}]}}