{"pii": "S0950584922000209", "abstracts": {"#name": "abstracts", "$": {"xmlns:ce": true, "xmlns:dm": true, "xmlns:sb": true}, "$$": [{"#name": "abstract", "$": {"class": "author", "view": "all", "id": "d1e2246"}, "$$": [{"#name": "section-title", "$": {"id": "d1e2247"}, "_": "Abstract"}, {"#name": "abstract-sec", "$": {"view": "all", "id": "d1e2249"}, "$$": [{"#name": "simple-para", "$": {"view": "all", "id": "d1e2250"}, "_": "Predicting vulnerable source code helps to focus the attention of a developer, or a program analysis technique, on those parts of the code that need to be examined with more scrutiny. Recent work proposed the use of function names as semantic cues that can be learned by a deep neural network (DNN) to aid in the hunt for vulnerability of functions."}, {"#name": "simple-para", "$": {"view": "all", "id": "d1e2252"}, "$$": [{"#name": "__text__", "_": "Combining identifier splitting, which we use to split each function name into its constituent words, with a novel frequency-based algorithm, we explore the extent to which the words that make up a function\u2019s name can be used to predict potentially vulnerable functions. In contrast to the "}, {"#name": "italic", "_": "lightweight"}, {"#name": "__text__", "_": " prediction provided by a DNN considering only function names, avoiding the need for a DNN provides "}, {"#name": "italic", "_": "featherweight"}, {"#name": "__text__", "_": " prediction. The underlying idea is that function names that contain certain \u201cdangerous\u201d words are more likely to accompany vulnerable functions. Of course, this assumes that the frequency-based algorithm can be properly tuned to focus on truly dangerous words."}]}, {"#name": "simple-para", "$": {"view": "all", "id": "d1e2260"}, "_": "Because it is more transparent than a DNN, which behaves as a \u201cblack box\u201d and thus provides no insight into the rationalization underlying its decisions, the frequency-based algorithm enables us to investigate the inner workings of the DNN. If successful, this investigation into what the DNN does and does not learn will help us train more effective future models."}, {"#name": "simple-para", "$": {"view": "all", "id": "d1e2262"}, "$$": [{"#name": "__text__", "_": "We empirically evaluate our approach on a heterogeneous dataset containing over 73"}, {"#name": "hsp", "$": {"sp": "0.16667"}}, {"#name": "__text__", "_": "000 functions labeled vulnerable, and over 950"}, {"#name": "hsp", "$": {"sp": "0.16667"}}, {"#name": "__text__", "_": "000 functions labeled benign. Our analysis shows that words alone account for a significant portion of the DNN\u2019s classification ability. We also find that words are of greatest value in the datasets with a more homogeneous vocabulary. Thus, when working within the scope of a given project, where the vocabulary is unavoidably homogeneous, our approach provides a cheaper, potentially complementary, technique to aid in the hunt for source-code vulnerabilities. Finally, this approach has the advantage that it is viable with orders of magnitude less training data."}]}]}]}]}}