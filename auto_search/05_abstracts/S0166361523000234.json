{"pii": "S0166361523000234", "abstracts": {"#name": "abstracts", "$": {"xmlns:ce": true, "xmlns:dm": true, "xmlns:sb": true}, "$$": [{"#name": "abstract", "$": {"class": "author", "id": "d1e1491", "view": "all"}, "$$": [{"#name": "section-title", "$": {"id": "d1e1492"}, "_": "Abstract"}, {"#name": "abstract-sec", "$": {"id": "d1e1494", "view": "all"}, "$$": [{"#name": "simple-para", "$": {"id": "d1e1495", "view": "all"}, "_": "In order to facilitate deterministic behavior; industrial real-time communication stacks need another design than non-real-time communication stacks typically found in e.g., Internet of Things and Cloud solutions. We propose a flexible stack design that enable code reuse between testbeds and simulators, as well as how stack layers are driven and prioritized. The design can be generalized and used for non-real-time bare-metal solutions like battery powered Internet of Things. Our approach aims at extending the use of simulation during development of industrial systems in order to find logical errors and wrong assumptions earlier in the development. Conducted and evaluated experiments show that the proposed solutions are able to extend the use of simulation during development of real-time communication software. This is achieved by reusing the same code on an industrial testbed and in a discrete event simulator. In addition, the experiments show that the stack design is generalizable and enable reuse with other non-real-time embedded systems. The contribution consists of a set of building blocks for real-time systems that enable control over the system timing when executing on a simulation host while reusing the source code from an industrial testbed. Overall, this will improve the engineering situation, with respect to code reuse, flexibility and debugging."}]}]}, {"#name": "abstract", "$": {"class": "author-highlights", "id": "d1e1497", "view": "all"}, "$$": [{"#name": "section-title", "$": {"id": "d1e1498"}, "_": "Highlights"}, {"#name": "abstract-sec", "$": {"id": "d1e1500", "view": "all"}, "$$": [{"#name": "simple-para", "$": {"id": "d1e1501", "view": "all"}, "$$": [{"#name": "list", "$": {"id": "d1e1503"}, "$$": [{"#name": "list-item", "$": {"id": "d1e1504"}, "$$": [{"#name": "label", "_": "\u2022"}, {"#name": "para", "$": {"id": "d1e1507", "view": "all"}, "_": "The complexity and amount of industrial communication software are increasing."}]}, {"#name": "list-item", "$": {"id": "d1e1509"}, "$$": [{"#name": "label", "_": "\u2022"}, {"#name": "para", "$": {"id": "d1e1512", "view": "all"}, "_": "Software development needs to move between research and development more efficiently."}]}, {"#name": "list-item", "$": {"id": "d1e1514"}, "$$": [{"#name": "label", "_": "\u2022"}, {"#name": "para", "$": {"id": "d1e1517", "view": "all"}, "_": "A flexible communication stack design improves code reuse between different systems."}]}, {"#name": "list-item", "$": {"id": "d1e1519"}, "$$": [{"#name": "label", "_": "\u2022"}, {"#name": "para", "$": {"id": "d1e1522", "view": "all"}, "_": "Flexible designs can improve code reuse between industrial testbeds and simulators."}]}, {"#name": "list-item", "$": {"id": "d1e1524"}, "$$": [{"#name": "label", "_": "\u2022"}, {"#name": "para", "$": {"id": "d1e1527", "view": "all"}, "_": "Overall, the findings can enable a more efficient research and development flow."}]}]}]}]}]}]}}