{"pii": "S0022000012001468", "abstracts": {"#name": "abstracts", "$": {"xmlns:ce": true, "xmlns:dm": true, "xmlns:sb": true}, "$$": [{"#name": "abstract", "$": {"class": "author", "id": "aep-abstract-id8"}, "$$": [{"#name": "section-title", "_": "Abstract"}, {"#name": "abstract-sec", "$": {"id": "aep-abstract-sec-id9"}, "$$": [{"#name": "simple-para", "$": {"id": "sp0010", "view": "all"}, "$$": [{"#name": "__text__", "_": "A modern query optimizer typically picks a "}, {"#name": "italic", "_": "single"}, {"#name": "__text__", "_": " query plan for all data based on overall data statistics. However, many have observed that real-life datasets tend to have non-uniform distributions. Selecting a single query plan may result in ineffective query execution for possibly large portions of the actual data. In addition most stream query processing systems, given the volume of data, cannot precisely model the system state much less account for uncertainty due to continuous variations. Such systems select a single query plan based upon imprecise statistics. In this paper, we present \u201c"}, {"#name": "italic", "_": "Query Mesh"}, {"#name": "__text__", "_": "\u201d (or "}, {"#name": "italic", "_": "QM"}, {"#name": "__text__", "_": "), a practical alternative to state-of-the-art data stream processing approaches. The main idea of "}, {"#name": "italic", "_": "QM"}, {"#name": "__text__", "_": " is to compute multiple routes (i.e., query plans), each designed for a particular subset of the data with distinct statistical properties. We use terms \u201cplans\u201d and \u201croutes\u201d interchangeably in our work. A "}, {"#name": "italic", "_": "classifier"}, {"#name": "__text__", "_": " model is induced and used to assign the best route to process incoming tuples based upon their data characteristics. We formulate the "}, {"#name": "italic", "_": "QM"}, {"#name": "__text__", "_": " search space and analyze its complexity. Due to the substantial search space, we propose several cost-based query optimization heuristics designed to effectively find nearly optimal "}, {"#name": "italic", "_": "QM"}, {"#name": "__text__", "_": "s. We propose the "}, {"#name": "italic", "_": "Self-Routing Fabric"}, {"#name": "__text__", "_": " ("}, {"#name": "italic", "_": "SRF"}, {"#name": "__text__", "_": ") infrastructure that supports query execution with multiple plans without physically constructing their topologies nor using a central router like Eddy. We also consider how to support uncertain route specification and execution in QM which can occur when imprecise statistics lead to more than one optimal route for a subset of data. Our experimental results indicate that "}, {"#name": "italic", "_": "QM"}, {"#name": "__text__", "_": " consistently provides better query execution performance and incurs negligible overhead compared to the alternative state-of-the-art data stream approaches."}]}]}]}, {"#name": "abstract", "$": {"class": "graphical", "id": "aep-abstract-id10"}, "$$": [{"#name": "abstract-sec", "$": {"id": "aep-abstract-sec-id11"}, "$$": [{"#name": "section-title", "_": "Highlights"}, {"#name": "simple-para", "$": {"id": "sp0020", "view": "all"}, "_": "\u25ba Query mesh is a solution between plan-based systems and continuously reoptimizing solutions. \u25ba Our classifier operator employs machine learning and inspects incoming tuples to determine the best routes for each tuple. \u25ba Our Self-Routing Fabric infrastructure execute multiple routes in parallel."}]}]}]}}